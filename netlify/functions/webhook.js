const axios = require('axios');

exports.handler = async (event, context) => {
  if (event.httpMethod === 'POST') {
    const paymentData = JSON.parse(event.body);
    console.log('Received payment data:', paymentData);

    if (paymentData.event === 'payment.succeeded') {
      const { flat = '–ù–µ —É–∫–∞–∑–∞–Ω–æ', phoneNumber, guestCount, orderTime, comment, orderId, cartItems, orderType } = paymentData.object.metadata;
      let totalPrice = paymentData.object.amount.value;

      const parsedCartItems = cartItems ? JSON.parse(cartItems) : [];
      console.log('Received cart items:', parsedCartItems);

      if (totalPrice === undefined || totalPrice === null) {
        console.error('Total price is not defined');
        totalPrice = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      } else {
        totalPrice = parseFloat(totalPrice).toFixed(2);
      }

      const TELEGRAM_BOT_TOKEN = '8049756630:AAHbPxs3rn6El7OfDxd1rmqxQA2PGJngktQ';
      const TELEGRAM_CHAT_ID_KITCHEN = '-1002346852862';  // ID —á–∞—Ç–∞ –¥–ª—è –∫—É—Ö–Ω–∏
      const TELEGRAM_CHAT_ID_USER = paymentData.object.metadata.telegramChatId; // ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö

      const cartItemsText = parsedCartItems
        .map((item, index) => `${index + 1}. ${item.text} - ${item.count} —à—Ç.`)
        .join('\n');

      const messageForKitchen = `
üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>
üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}

üìç –ê–¥—Ä–µ—Å: ${flat}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}
üë• –ì–æ—Å—Ç–∏: ${guestCount}
‚è∞ –í—Ä–µ–º—è: ${orderTime}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}
üí∞ –°—É–º–º–∞: ${totalPrice} ‚ÇΩ
üç¥ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:</b>
${cartItemsText}
`;

      const messageForUser = `
üôè <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>
üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}

üìç –ê–¥—Ä–µ—Å: ${flat}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}
üë• –ì–æ—Å—Ç–∏: ${guestCount}
‚è∞ –í—Ä–µ–º—è: ${orderTime}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}
üí∞ –°—É–º–º–∞: ${totalPrice} ‚ÇΩ
üç¥ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:</b>
${cartItemsText}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ!
`;

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫—É—Ö–Ω—é
      try {
        await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
          chat_id: TELEGRAM_CHAT_ID_KITCHEN,
          text: messageForKitchen,
          parse_mode: 'HTML',
        });
      } catch (error) {
        console.error('Error sending message to kitchen:', error.response ? error.response.data : error.message);
      }

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (TELEGRAM_CHAT_ID_USER) {
        try {
          await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            chat_id: TELEGRAM_CHAT_ID_USER,
            text: messageForUser,
            parse_mode: 'HTML',
          });
        } catch (error) {
          console.error('Error sending message to user:', error.response ? error.response.data : error.message);
        }
      }

      return {
        statusCode: 200,
        body: JSON.stringify({ message: 'Telegram notifications sent' }),
      };
    } else {
      return {
        statusCode: 200,
        body: JSON.stringify({ message: 'Payment not completed successfully' }),
      };
    }
  }

  return {
    statusCode: 405,
    body: JSON.stringify({ message: 'Method Not Allowed' }),
  };
};
