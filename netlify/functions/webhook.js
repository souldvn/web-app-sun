const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

exports.handler = async (event, context) => {
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Idempotence-Key',
      },
      body: JSON.stringify({}),
    };
  }

  if (event.httpMethod === 'POST') {
    const paymentData = JSON.parse(event.body);
    console.log('Received payment data:', paymentData);

    if (paymentData.event === 'payment.succeeded') {
      const { flat = '–ù–µ —É–∫–∞–∑–∞–Ω–æ', phoneNumber, guestCount, orderTime, comment, orderId, cartItems, orderType, chatId } = paymentData.object.metadata;
      let totalPrice = paymentData.object.amount.value;

      const parsedCartItems = cartItems ? JSON.parse(cartItems) : [];
      console.log('Received cart items:', parsedCartItems);

      if (totalPrice === undefined || totalPrice === null) {
        console.error('Total price is not defined');
        totalPrice = '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      } else {
        totalPrice = parseFloat(totalPrice).toFixed(2);
      }

      const TELEGRAM_BOT_TOKEN = '8049756630:AAHbPxs3rn6El7OfDxd1rmqxQA2PGJngktQ';
      const TELEGRAM_CHAT_ID = '-1002346852862'; // –ß–∞—Ç –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ (–ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ–±—â–∏–π —á–∞—Ç)

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–≤–∞—Ä–∞
      const cartItemsText = parsedCartItems
        .map((item, index) => `${index + 1}. ${item.text} - ${item.count} —à—Ç.`)
        .join('\n');

      const chefMessage = `üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b>
üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}
      —á–∞—Ç –∞–π–¥–∏: ${chatId}
üìç –ê–¥—Ä–µ—Å: ${flat}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}
üë• –ì–æ—Å—Ç–∏: ${guestCount}
‚è∞ –í—Ä–µ–º—è: ${orderTime}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}
üí∞ –°—É–º–º–∞: ${totalPrice} ‚ÇΩ
üç¥ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:</b>
${cartItemsText}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–≤–∞—Ä—É
      try {
        const chefResponse = await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
          chat_id: TELEGRAM_CHAT_ID,
          text: chefMessage,
          parse_mode: 'HTML',
        });

        console.log('Telegram response for chef:', chefResponse.data);
      } catch (error) {
        console.error('Error sending message to chef:', error.response ? error.response.data : error.message);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const userMessage = `üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>
<b>–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:</b>
üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderId}

üìç –ê–¥—Ä–µ—Å: ${flat}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}
üë• –ì–æ—Å—Ç–∏: ${guestCount}
‚è∞ –í—Ä–µ–º—è: ${orderTime}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}
üí∞ –°—É–º–º–∞: ${totalPrice} ‚ÇΩ
üç¥ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:</b>
${cartItemsText}

üîî –ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      try {
        const userResponse = await axios.post(`https://api.telegram.org/bot7515370853:AAEikh7iTegPcr8vhxpYsBNNJOuB30M3oaQ/sendMessage`, {
          chat_id: chatId,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º chatId –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          text: userMessage,
          parse_mode: 'HTML',
        });

        console.log('Telegram response for user:', userResponse.data);

        return {
          statusCode: 200,
          body: JSON.stringify({ message: 'Telegram notification sent to user and chef' }),
        };
      } catch (error) {
        console.error('Error sending message to user:', error.response ? error.response.data : error.message);
        return {
          statusCode: 500,
          body: JSON.stringify({ message: 'Error sending notification to user', error: error.message }),
        };
      }
    } else {
      return {
        statusCode: 200,
        body: JSON.stringify({ message: 'Payment not completed successfully' }),
      };
    }
  }

  return {
    statusCode: 405,
    body: JSON.stringify({ message: 'Method Not Allowed' }),
  };
};
